--- Test Plan ---


to test the program type with your own test cases when in the project directory type:

	invertedIndex <output file name> <input file/directory path>

The program will first check if the output file exists, if it does it check permissions.

If we can not write to the output file then we can not continue the program. 
If the output file does exist then we ask if the user wishes to overwrite it. Continue if yes, exit if no. 
If the file does not exist, create it and ask if the user wants to write to it. Continue if yes, exit if no. 

If we continue, the program will check if the path represents a file or directory. 

If the path represents a file, we will check all of the words in the file and print them in the requested XML format. 

If the path represents a directory, we will go int to the directory, and from there we will scan the directory and check for further files/ directories. 

There is a separate thread that will run and constantly output the runtime of the program to the console. 

Once the program is done scanning for files and directories it will print out the xml format to the output file. 

It will print all words in alphabetical order a->z and all files that contain that word in count order 1->2+

If two files have the same count for a word, the will be in filename alphabetical order. An example will be presented bellow. 

--- Large Scale ---


In a large scale test case this program works just fine. While testing we wrote a 120 MB file which took about 5 minutes to run. 

The program was able to scan music files, pdf files, md files, directories, hidden directories etc. 

While testing for large programs, be aware it will take some time, but the time will constantly be output to the console the entirety of the duration. 

--- Included Test Case ---

NOTE * The test cases found are not too complicated as the directions said to keep the files small *

In this project is a folder called testFolder. 

testFolder contains files and directories.

All of the files contain text, however not all files end with an extension.

Some files may even have the same name.

to test the program when you are in the project directory type: 

	./invertedIndex results.txt testFolder/


output: 

<"?xml version="1.0" encoding="UTF-8"?>
<fileIndex>
	<word text="a">
		<file name="test">2</file>
		<file name="appl.e.txt">1</file>
		<file name="testt.txt">1</file>
		<file name="tes.t">1</file>
		<file name="te.st.txt">1</file>
		<file name="wow.txt">1</file>
		<file name="w.ow.txt">1</file>
	<x/word>
	<word text="all">
		<file name="hello.txt">1</file>
	<x/word>
	<word text="appeared">
		<file name="test">1</file>
	<x/word>
	<word text="ar3">
		<file name="test.txt">1</file>
		<file name="w.ow.txt">1</file>
	<x/word>
	<word text="bannanas">
		<file name="testt.txt">1</file>
	<x/word>
	<word text="b">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="c">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="d">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="does">
		<file name="hello.txt">1</file>
	<x/word>
	<word text="dun">
		<file name="test">2</file>
	<x/word>
	<word text="dunnnnn">
		<file name="test">1</file>
	<x/word>
	<word text="e">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="ecan12312">
		<file name="test">1</file>
	<x/word>
	<word text="f">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="file">
		<file name="wow.txt">1</file>
	<x/word>
	<word text="files">
		<file name="test">1</file>
	<x/word>
	<word text="folder">
		<file name="wow.txt">1</file>
	<x/word>
	<word text="fun">
		<file name="systems.txt">1</file>
	<x/word>
	<word text="g">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="get">
		<file name="hello.txt">1</file>
	<x/word>
	<word text="god">
		<file name="tes.t">1</file>
	<x/word>
	<word text="going">
		<file name="tes.t">1</file>
	<x/word>
	<word text="h">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="hell0">
		<file name="test.txt">1</file>
		<file name="w.ow.txt">1</file>
	<x/word>
	<word text="how">
		<file name="test">1</file>
	<x/word>
	<word text="h0w">
		<file name="test.txt">1</file>
		<file name="w.ow.txt">1</file>
	<x/word>
	<word text="i">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="if">
		<file name="hello.txt">1</file>
		<file name="test">1</file>
	<x/word>
	<word text="in">
		<file name="wow.txt">1</file>
	<x/word>
	<word text="information">
		<file name="hello.txt">1</file>
	<x/word>
	<word text="is">
		<file name="wow.txt">2</file>
		<file name="recursive.txt">1</file>
		<file name="systems.txt">1</file>
		<file name="tes.t">1</file>
	<x/word>
	<word text="it">
		<file name="hello.txt">1</file>
		<file name="recursive.txt">1</file>
		<file name="wow.txt">1</file>
	<x/word>
	<word text="j">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="k">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="lets">
		<file name="hello.txt">1</file>
	<x/word>
	<word text="likes">
		<file name="testt.txt">1</file>
	<x/word>
	<word text="l">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="lives">
		<file name="wow.txt">1</file>
	<x/word>
	<word text="many">
		<file name="test">1</file>
	<x/word>
	<word text="me">
		<file name="test">1</file>
	<x/word>
	<word text="monkey">
		<file name="testt.txt">1</file>
	<x/word>
	<word text="m">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="my">
		<file name="tes.t">1</file>
	<x/word>
	<word text="n">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="named">
		<file name="test">1</file>
		<file name="wow.txt">2</file>
	<x/word>
	<word text="o">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="or">
		<file name="recursive.txt">1</file>
	<x/word>
	<word text="p">
		<file name="appl.e.txt">1</file>
		<file name="te.st.txt">1</file>
	<x/word>
	<word text="program">
		<file name="hello.txt">1</file>
		<file name="test">1</file>
	<x/word>
	<word text="programming">
		<file name="systems.txt">1</file>
	<x/word>
	<word text="recursive">
		<file name="recursive.txt">1</file>
	<x/word>
	<word text="see">
		<file name="hello.txt">1</file>
	<x/word>
	<word text="systems">
		<file name="systems.txt">1</file>
	<x/word>
	<word text="test">
		<file name="test">2</file>
	<x/word>
	<word text="testfolder2">
		<file name="wow.txt">1</file>
	<x/word>
	<word text="the">
		<file name="hello.txt">1</file>
	<x/word>
	<word text="this">
		<file name="hello.txt">1</file>
		<file name="wow.txt">1</file>
		<file name="tes.t">1</file>
	<x/word>
	<word text="to">
		<file name="tes.t">1</file>
	<x/word>
	<word text="txt">
		<file name="wow.txt">1</file>
	<x/word>
	<word text="well">
		<file name="hello.txt">1</file>
	<x/word>
	<word text="wild">
		<file name="test">1</file>
	<x/word>
	<word text="work">
		<file name="tes.t">1</file>
	<x/word>
	<word text="works">
		<file name="hello.txt">1</file>
	<x/word>
	<word text="wow">
		<file name="wow.txt">2</file>
		<file name="hello.txt">1</file>
		<file name="tes.t">1</file>
	<x/word>
	<word text="you">
		<file name="test">1</file>
	<x/word>
	<word text="y0u">
		<file name="test.txt">1</file>
		<file name="w.ow.txt">1</file>
	<x/word>
<fileIndex>
